syntax = "proto3";
package influxdata.iox.ingester.v1;
option go_package = "github.com/influxdata/iox/ingester/v1";

// NOTE: This is an ALPHA / Internal API that is used as part of the
// end to end tests.
//
// A public API is tracked here:
// <https://github.com/influxdata/influxdb_iox/issues/4354>
service WriteInfoService {
  // Get information about a particular write
  rpc GetWriteInfo(GetWriteInfoRequest) returns (GetWriteInfoResponse);
}

message GetWriteInfoRequest {
  // The write token returned from a write that was written to one or
  // more shards
  string write_token = 1;
}

message GetWriteInfoResponse {
  // Renamed from kafka_partition_infos to shard_infos
  reserved 3;
  reserved "kafka_partition_infos";

  // Information for all shards in this write
  repeated ShardInfo shard_infos = 4;
}

// Status of a part of a write in a particular shard
message ShardInfo {
  // Unique shard index
  int32 shard_index = 1;

  // the status of the data for this shard
  ShardStatus status = 2;
}

// the state
enum ShardStatus {
  // Unspecified status, will result in an error.
  SHARD_STATUS_UNSPECIFIED = 0;

  // The ingester has not yet processed data in this write
  SHARD_STATUS_DURABLE = 1;

  // The ingester has processed the data in this write and it is
  // readable (will be included in a query response)?
  SHARD_STATUS_READABLE = 2;

  // The ingester has processed the data in this write and it is both
  // readable and completely persisted to parquet files.
  SHARD_STATUS_PERSISTED = 3;

  // The ingester does not have information about this shard
  SHARD_STATUS_UNKNOWN = 4;
}

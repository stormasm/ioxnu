syntax = "proto3";
package influxdata.iox.write_buffer.v1;
option go_package = "github.com/influxdata/iox/write_buffer/v1";

import "influxdata/iox/delete/v1/service.proto";
import "influxdata/pbdata/v1/influxdb_pb_data_protocol.proto";

// Configures the use of a write buffer.
message WriteBufferConnection {
  reserved 1;
  reserved "direction";

  // Which type should be used (e.g. "kafka", "mock")
  string type = 2;

  // Connection string, depends on `type`.
  string connection = 3;

  // Old non-nested auto-creation config.
  reserved 4, 5, 7;

  // Special configs to be applied when establishing the connection.
  //
  // This depends on `type` and can configure aspects like timeouts.
  map<string, string> connection_config = 6;

  // Specifies if the shards (e.g. for Kafka in form of a topic w/ `n_shards` partitions) should be
  // automatically created if they do not existing prior to reading or writing.
  WriteBufferCreationConfig creation_config = 8;
}

// Configs shard auto-creation for write buffers.
//
// What that means depends on the used write buffer, e.g. for Kafka this will create a new topic w/
// `n_shards` partitions.
message WriteBufferCreationConfig {
  // Renamed from n_sequencers to n_shards.
  reserved 1;
  reserved "n_sequencers";

  // Number of shards.
  //
  // How they are implemented depends on `type`, e.g. for Kafka this is mapped to the number of
  // partitions.
  //
  // If 0, a server-side default is used
  uint32 n_shards = 3;

  // Special configs to by applied when shards are created.
  //
  // This depends on `type` and can setup parameters like retention policy.
  //
  // Contains 0 or more key value pairs
  map<string, string> options = 2;
}

// A write payload for the write buffer
message WriteBufferPayload {
  oneof payload {
    influxdata.pbdata.v1.DatabaseBatch write = 1;
    influxdata.iox.delete.v1.DeletePayload delete = 2;
  }
}
